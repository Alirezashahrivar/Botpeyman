# -*- coding: utf-8 -*-
"""Untitled13.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1c3DxZ3JBVTAHeFYwQ163CRgf5YaTej0q
"""

##bot is mine

import nest_asyncio
import asyncio

nest_asyncio.apply()





from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    filters,
    ConversationHandler,
    ContextTypes,
)
import nest_asyncio
import asyncio

nest_asyncio.apply()

# شناسه مدیر
ADMIN_CHAT_ID = 685549695  # شناسه تلگرام شما
CHANNEL_USERNAME = "@Tabadole_test"  # نام کاربری کانال تلگرام

# وضعیت‌ها برای مکالمه
ASK_NAME, ASK_SURNAME, ASK_PHONE, ASK_CITY, SHOW_OPTIONS, TRADE_TYPE, \
ASK_PAYMENT_METHOD, ASK_COUNTRY, ASK_AMOUNT, ASK_PRICE, ADMIN_DECISION, \
GRE_USERNAME, GRE_PASSWORD, GRE_EXAM_TYPE, GRE_EXAM_DATE, GRE_CENTER, \
GRE_TIME, GRE_DISCOUNT_CODE, GRE_NOTES, APPLICANT_INFO, APPLICANT_NAME, \
APPLICANT_LAST_NAME, APPLICATION_LOOP, APPLICATION_DETAILS = range(24)

# شروع ربات
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("سلام! لطفاً نام خود را وارد کنید:")
    return ASK_NAME

# دریافت نام
async def ask_name(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['name'] = update.message.text
    await update.message.reply_text("نام خانوادگی خود را وارد کنید:")
    return ASK_SURNAME

# دریافت نام خانوادگی
async def ask_surname(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['surname'] = update.message.text
    await update.message.reply_text("لطفاً شماره تلفن خود را وارد کنید:")
    return ASK_PHONE

# دریافت شماره تلفن
async def ask_phone(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['phone'] = update.message.text
    await update.message.reply_text("لطفاً شهر خود را وارد کنید:")
    return ASK_CITY

# دریافت شهر و نمایش گزینه‌ها
async def ask_city(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['city'] = update.message.text
    name = context.user_data['name']
    surname = context.user_data['surname']
    city = context.user_data['city']

    await update.message.reply_text(f"ممنون {name} {surname} از {city}!")
    reply_keyboard = [["شروع معامله 💱", "پرداخت آزمون های زبان 📑", "اپلیکیشن فی دانشگاه 🏫"], ["تنظیمات ⚙️", "راهنما 🆘", "لغو ❌"]]
    await update.message.reply_text("یکی از گزینه‌های زیر را انتخاب کنید:", reply_markup=ReplyKeyboardMarkup(reply_keyboard, resize_keyboard=True))
    return SHOW_OPTIONS

# پردازش گزینه‌های اصلی
async def handle_options(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_choice = update.message.text
    if user_choice == "شروع معامله 💱":
        reply_keyboard = [["خرید 📈", "فروش 📉"], ["بازگشت 🔙"]]
        await update.message.reply_text("آیا می‌خواهید خرید کنید یا فروش؟", reply_markup=ReplyKeyboardMarkup(reply_keyboard, resize_keyboard=True))
        return TRADE_TYPE
    elif user_choice == "پرداخت آزمون های زبان 📑":
        reply_keyboard = [["GRE", "TOEFL"], ["بازگشت 🔙"]]
        await update.message.reply_text(
            "لطفاً آزمون مورد نظر خود را انتخاب کنید:",
            reply_markup=ReplyKeyboardMarkup(reply_keyboard, resize_keyboard=True),
        )
        return GRE_USERNAME
    elif user_choice == "اپلیکیشن فی دانشگاه 🏫":
        await handle_application_fee(update, context)  # Call the university fee handler
        return APPLICANT_INFO
    elif user_choice == "تنظیمات ⚙️":
        await update.message.reply_text("به بخش تنظیمات خوش آمدید.")
        return SHOW_OPTIONS
    elif user_choice == "راهنما 🆘":
        await update.message.reply_text("این بخش به شما کمک می‌کند.")
        return SHOW_OPTIONS
    elif user_choice == "لغو ❌":
        await update.message.reply_text("مکالمه لغو شد.")
        return ConversationHandler.END
    else:
        await update.message.reply_text("لطفاً یک گزینه معتبر را انتخاب کنید.")
        return SHOW_OPTIONS

# پردازش انتخاب خرید یا فروش
async def handle_trade_type(update: Update, context: ContextTypes.DEFAULT_TYPE):
    trade_choice = update.message.text
    context.user_data['trade_type'] = "خرید" if trade_choice == "خرید 📈" else "فروش"
    reply_keyboard = [["انتقال بانکی", "پی‌پال", "نقدی"], ["بازگشت 🔙"]]
    await update.message.reply_text(
        "چگونه می‌خواهید پول خود را دریافت یا پرداخت کنید؟",
        reply_markup=ReplyKeyboardMarkup(reply_keyboard, resize_keyboard=True),
    )
    return ASK_PAYMENT_METHOD

# پردازش روش پرداخت
async def handle_payment_method(update: Update, context: ContextTypes.DEFAULT_TYPE):
    payment_method = update.message.text
    if payment_method == "انتقال بانکی":
        context.user_data['payment_method'] = payment_method
        reply_keyboard = [["آلمان", "فرانسه", "ایتالیا", "هلند"], ["اسپانیا", "اتریش", "سوئیس", "انگلستان"], ["سایر موارد"]]
        await update.message.reply_text(
            "لطفاً کشوری که حساب بانکی دارید را انتخاب کنید:",
            reply_markup=ReplyKeyboardMarkup(reply_keyboard, resize_keyboard=True),
        )
        return ASK_COUNTRY
    elif payment_method in ["پی‌پال", "نقدی"]:
        context.user_data['payment_method'] = payment_method
        await update.message.reply_text("لطفاً مقدار یورو را وارد کنید:")
        return ASK_AMOUNT
    else:
        await update.message.reply_text("لطفاً یک گزینه معتبر را انتخاب کنید.")
        return ASK_PAYMENT_METHOD

# پردازش کشور
async def handle_country(update: Update, context: ContextTypes.DEFAULT_TYPE):
    country = update.message.text
    if country == "سایر موارد":
        await update.message.reply_text("لطفاً نام کشور را وارد کنید:")
        return ASK_COUNTRY

    context.user_data['country'] = country
    await update.message.reply_text("لطفاً مقدار یورو را وارد کنید:")
    return ASK_AMOUNT

# دریافت مقدار
async def handle_amount(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        context.user_data['amount'] = float(update.message.text)
        await update.message.reply_text("لطفاً قیمت مورد نظر خود را برای هر یورو وارد کنید (به تومان):")
        return ASK_PRICE
    except ValueError:
        await update.message.reply_text("لطفاً یک عدد معتبر وارد کنید.")
        return ASK_AMOUNT

# دریافت قیمت
async def handle_price(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        context.user_data['price'] = float(update.message.text)
        name = context.user_data['name']
        surname = context.user_data['surname']
        phone = context.user_data['phone']
        city = context.user_data['city']
        trade_type = context.user_data['trade_type']
        payment_method = context.user_data['payment_method']
        country = context.user_data.get('country', "نامشخص")
        amount = context.user_data['amount']
        price = context.user_data['price']

        # ارسال به مدیر
        message = (f"معامله جدید:\n"
                   f"نام: {name}\n"
                   f"نام خانوادگی: {surname}\n"
                   f"شماره تلفن: {phone}\n"
                   f"شهر: {city}\n"
                   f"نوع معامله: {trade_type}\n"
                   f"روش پرداخت: {payment_method}\n"
                   f"کشور: {country}\n"
                   f"مقدار: {amount} یورو\n"
                   f"قیمت: {price} تومان")
        await context.bot.send_message(chat_id=ADMIN_CHAT_ID, text=message)

        # نمایش گزینه ارسال به کانال
        reply_keyboard = [["ارسال به کانال 📢", "لغو ❌"]]
        await update.message.reply_text("آیا می‌خواهید این درخواست را به کانال ارسال کنید؟", reply_markup=ReplyKeyboardMarkup(reply_keyboard, resize_keyboard=True))
        return ADMIN_DECISION
    except ValueError:
        await update.message.reply_text("لطفاً یک عدد معتبر وارد کنید.")
        return ASK_PRICE

# تصمیم مدیر
async def handle_admin_decision(update: Update, context: ContextTypes.DEFAULT_TYPE):
    decision = update.message.text
    if decision == "ارسال به کانال 📢":
        # ارسال به کانال
        message = (f"معامله جدید:\n"
                   f"نوع معامله: {context.user_data['trade_type']}\n"
                   f"مقدار: {context.user_data['amount']} یورو\n"
                   f"قیمت: {context.user_data['price']} تومان\n"
                   f"روش پرداخت: {context.user_data['payment_method']}\n"
                   f"کشور: {context.user_data.get('country', 'نامشخص')}\n")
        await context.bot.send_message(chat_id=CHANNEL_USERNAME, text=message)
        await update.message.reply_text("درخواست با موفقیت به کانال ارسال شد.")
    elif decision == "لغو ❌":
        await update.message.reply_text("ارسال به کانال لغو شد.")
    else:
        await update.message.reply_text("لطفاً یک گزینه معتبر را انتخاب کنید.")
        return ADMIN_DECISION

    return ConversationHandler.END

# لغو مکالمه
async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("مکالمه لغو شد.")
    return ConversationHandler.END

# ثبت اطلاعات آزمون GRE
async def handle_gre_registration(update: Update, context: ContextTypes.DEFAULT_TYPE):
    current_step = context.user_data.get('gre_step', GRE_USERNAME)

    if current_step == GRE_USERNAME:
        await update.message.reply_text("لطفاً نام کاربری ETS خود را وارد کنید:")
        context.user_data['gre_step'] = GRE_PASSWORD
        return GRE_PASSWORD
    elif current_step == GRE_PASSWORD:
        context.user_data['username'] = update.message.text
        await update.message.reply_text("لطفاً رمز عبور ETS خود را وارد کنید:")
        context.user_data['gre_step'] = GRE_EXAM_TYPE
        return GRE_EXAM_TYPE
    elif current_step == GRE_EXAM_TYPE:
        context.user_data['password'] = update.message.text
        reply_keyboard = [["حضوری", "Home Edition"], ["بازگشت 🔙"]]
        await update.message.reply_text(
            "لطفاً نوع آزمون خود را مشخص کنید (حضوری یا Home Edition):",
            reply_markup=ReplyKeyboardMarkup(reply_keyboard, resize_keyboard=True),
        )
        context.user_data['gre_step'] = GRE_EXAM_DATE
        return GRE_EXAM_DATE
    elif current_step == GRE_EXAM_DATE:
        context.user_data['exam_type'] = update.message.text
        await update.message.reply_text("لطفاً تاریخ آزمون را وارد کنید (به‌صورت YYYY-MM-DD):")
        context.user_data['gre_step'] = GRE_CENTER
        return GRE_CENTER
    elif current_step == GRE_CENTER:
        context.user_data['exam_date'] = update.message.text
        await update.message.reply_text("لطفاً مرکز آزمون خود را وارد کنید:")
        context.user_data['gre_step'] = GRE_TIME
        return GRE_TIME
    elif current_step == GRE_TIME:
        context.user_data['exam_center'] = update.message.text
        reply_keyboard = [["صبح", "عصر"], ["بازگشت 🔙"]]
        await update.message.reply_text(
            "لطفاً زمان آزمون خود را مشخص کنید (صبح یا عصر):",
            reply_markup=ReplyKeyboardMarkup(reply_keyboard, resize_keyboard=True),
        )
        context.user_data['gre_step'] = GRE_DISCOUNT_CODE
        return GRE_DISCOUNT_CODE
    elif current_step == GRE_DISCOUNT_CODE:
        context.user_data['exam_time'] = update.message.text
        reply_keyboard = [["بله", "خیر"], ["بازگشت 🔙"]]
        await update.message.reply_text(
            "آیا کد تخفیف ETS دارید؟",
            reply_markup=ReplyKeyboardMarkup(reply_keyboard, resize_keyboard=True),
        )
        context.user_data['gre_step'] = GRE_NOTES
        return GRE_NOTES
    elif current_step == GRE_NOTES:
        if update.message.text == "بله":
            await update.message.reply_text("لطفاً کد تخفیف ETS خود را وارد کنید:")
            return GRE_NOTES + 1
        elif update.message.text == "خیر":
            await update.message.reply_text("اگر یادداشتی دارید وارد کنید، در غیر این صورت تایپ کنید 'ندارم':")
            return GRE_NOTES + 1
        else:
            await update.message.reply_text("لطفاً یک گزینه معتبر انتخاب کنید.")
            return GRE_DISCOUNT_CODE
    elif current_step == GRE_NOTES + 1:
        context.user_data['discount_code'] = update.message.text
        await update.message.reply_text("فرآیند ثبت‌نام با موفقیت تکمیل شد!")
        return ConversationHandler.END
    else:
        await update.message.reply_text("خطایی رخ داده است. لطفاً دوباره تلاش کنید.")
        return ConversationHandler.END

# ثبت اطلاعات برای پرداخت اپلیکیشن فی دانشگاه ها
async def handle_application_fee(update: Update, context: ContextTypes.DEFAULT_TYPE): #new
    current_step = context.user_data.get('application_step', APPLICANT_INFO)

    if current_step == APPLICANT_INFO:
        await update.message.reply_text(
            "سفارش را برای چه کسی ثبت می کنید؟",
            reply_markup=ReplyKeyboardMarkup([
                ["خودم", "فرد دیگری"]
            ], resize_keyboard=True)
        )
        context.user_data['application_step'] = APPLICANT_NAME
        return APPLICANT_NAME

    elif current_step == APPLICANT_NAME:
        context.user_data['applicant_for'] = update.message.text
        await update.message.reply_text(
            "لطفا نام پاسپورتی متقاضی به انگلیسی وارد کنید:*"
        )
        context.user_data['application_step'] = APPLICANT_LAST_NAME
        return APPLICANT_LAST_NAME

    elif current_step == APPLICANT_LAST_NAME:
        context.user_data['applicant_name'] = update.message.text
        await update.message.reply_text(
            "لطفا نام خانوادگی پاسپورتی متقاضی به انگلیسی وارد کنید:*"
        )
        context.user_data['application_step'] = APPLICATION_LOOP
        return APPLICATION_LOOP

    elif current_step == APPLICATION_LOOP:
        context.user_data['applicant_last_name'] = update.message.text
        await update.message.reply_text(
            "لطفا تعداد ارسال اپلیکیشن را بین 1 تا 5 وارد کنید:"
        )
        context.user_data['application_step'] = APPLICATION_DETAILS
        return APPLICATION_DETAILS

    elif current_step == APPLICATION_DETAILS:
        try:
            application_count = int(update.message.text)
            if 1 <= application_count <= 5:
                context.user_data['application_count'] = application_count
                for i in range(1, application_count + 1):
                    await update.message.reply_text(
                        f"اطلاعات مرحله {i}:\n"
                        "لینک ورود به صفحه اپلیکیشن دانشگاه:*"
                    )
                    await update.message.reply_text("مبلغ اپلیکیشن فی به یورو:*")
                    await update.message.reply_text("نام کاربری:*")
                    await update.message.reply_text("رمز عبور:*"
                    # await update.message.reply_text(
                    #     "توضیحات و دستور العمل رسیدن به صفحه پرداخت با ویزا کارت/مستر کارت/پی پال"
                    )
                await update.message.reply_text("فرآیند ثبت اطلاعات با موفقیت تکمیل شد!")
                return ConversationHandler.END
            else:
                await update.message.reply_text("عدد وارد شده باید بین 1 تا 5 باشد.")
                return APPLICATION_LOOP
        except ValueError:
            await update.message.reply_text("لطفا یک عدد معتبر وارد کنید.")
            return APPLICATION_LOOP

# تابع اصلی
import asyncio
from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    filters,
    ConversationHandler,
    ContextTypes,
)

# Ensure you have imported all required dependencies and your bot functions

async def main():
    try:
        # Initialize application with bot token
        application = Application.builder().token("7567022859:AAEwxlLSEH0JV00LkeLVnYlocEgAF8wYOqI").build()

        # Setup ConversationHandler
        conv_handler = ConversationHandler(
            entry_points=[CommandHandler('start', start)],
            states={
                ASK_NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, ask_name)],
                ASK_SURNAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, ask_surname)],
                ASK_PHONE: [MessageHandler(filters.TEXT & ~filters.COMMAND, ask_phone)],
                ASK_CITY: [MessageHandler(filters.TEXT & ~filters.COMMAND, ask_city)],
                SHOW_OPTIONS: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_options)],
                TRADE_TYPE: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_trade_type)],
                ASK_PAYMENT_METHOD: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_payment_method)],
                ASK_COUNTRY: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_country)],
                ASK_AMOUNT: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_amount)],
                ASK_PRICE: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_price)],
                ADMIN_DECISION: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_admin_decision)],
                GRE_USERNAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_gre_registration)],
                GRE_PASSWORD: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_gre_registration)],
                GRE_EXAM_TYPE: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_gre_registration)],
                GRE_EXAM_DATE: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_gre_registration)],
                GRE_CENTER: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_gre_registration)],
                GRE_TIME: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_gre_registration)],
                GRE_DISCOUNT_CODE: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_gre_registration)],
                GRE_NOTES: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_gre_registration)],
                APPLICANT_INFO: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_application_fee)],
                APPLICANT_NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_application_fee)],
                APPLICANT_LAST_NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_application_fee)],
                APPLICATION_LOOP: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_application_fee)],
                APPLICATION_DETAILS: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_application_fee)],
            },
            fallbacks=[CommandHandler('cancel', cancel)],
        )

        # Add handlers to the application
        application.add_handler(conv_handler)

        # Start the bot
        print("Bot is running...")
        await application.run_polling()
    except Exception as e:
        print(f"An error occurred: {e}")

if __name__ == "__main__":
    asyncio.run(main())

